@page "/RegistrationPage"
@using VibeBusWeb.Data
@inject Microsoft.JSInterop.IJSRuntime JSRuntime
@inject DbConnectionContext dbContext

<div class="login-form">
    <h1 class="Vhonh">Регистрация</h1>

    <div class="form-group">
        <label for="name">Имя:</label>
        <input type="text" maxlength="15" id="firstName" class="form-control" @bind="_name" required />
    </div>

    <div class="form-group">
        <label for="surname">Фамилия:</label>
        <input type="text" maxlength="20" id="lastName" class="form-control" @bind="_surname" required />
    </div>

    <div class="form-group">
        <label for="email">Почта:</label>
        <input type="email" maxlength="30" id="email" class="form-control" @bind="_email" required />
    </div>

    <div class="form-group">
        <label for="phoneNumber">Номер телефона:</label>
        <input type="tel" maxlength="11" id="phoneNumber" class="form-control" oninput="this.value = this.value.replace(/[^0-9]/g, '').slice(0, 12)" @bind="_phoneNumber" required />
    </div>

    <div class="form-group">
        <label for="password">Пароль:</label>
        <input type="password" maxlength="8" id="password" class="form-control" @bind="_password" required />
    </div>

    <button class="btn btn-reg" @onclick="Register">Зарегистироваться</button>
</div>

@code {
    [Inject]
    private NavigationManager NavigationManager { get; set; } = null!;

    private string _name = null!;

    private string _surname = null!;

    private string _email = null!;

    private string _phoneNumber = null!;

    private string _password = null!;

    private async Task Register()
    {
        if (!_email.Contains("@"))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Некорректный адрес электронной почты.");
            return;
        }
        var existingUser = dbContext.Users.FirstOrDefault(c => c.Email == _email);
        if(existingUser != null)
        {
            await JSRuntime.InvokeVoidAsync("alert", "По этой почте пользователь уже был зарегистрирован!");
        }
        if (string.IsNullOrEmpty(_name) ||
           string.IsNullOrEmpty(_surname) ||
           string.IsNullOrEmpty(_email) ||
           string.IsNullOrEmpty(_phoneNumber) ||
           string.IsNullOrEmpty(_password))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Пожалуйста, заполните все обязательные поля.");
            return;
        }
        var user = new Users()
            {
                Name = _name,
                Surname = _surname,
                Email = _email,
                PhoneNumber = _phoneNumber,
                Password = _password
            };
            dbContext.Users.Add(user);
            await dbContext.SaveChangesAsync();

            NavigationManager.NavigateTo("/");
    }
}
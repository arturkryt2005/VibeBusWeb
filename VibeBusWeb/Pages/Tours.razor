@page "/Tours"
@inject DbConnectionContext dbContext
@inject Microsoft.JSInterop.IJSRuntime JSRuntime
@using Microsoft.EntityFrameworkCore;
@using VibeBusWeb.Data
@inject UserService userService

<Header />

<div class="container">
    <h1 class="viborh1">Выберите путь</h1>

    <div class="form-group">
        <label for="city1">Город Отправления:</label>
        <select class="form-control" id="city1" @onchange="ChangeCity">
            @foreach (var city in Cities)
            {
                <option value="@city.Id">@city.Name</option>
            }
        </select>
    </div>

    <div class="form-group">
        <label for="city2">Город Прибытия:</label>
        <select class="form-control" id="city2" @onchange="ChangeCity2">
            @foreach (var city in Cities)
            {
                if (city.Id != selectedCityId)
                {
                    <option value="@city.Id">@city.Name</option>
                }
            }
        </select>
    </div>

    <div class="form-group">
        <label for="date">Дата отправления:</label>
        <input class="form-control" type="date" id="date" @bind="DepartureDate" min="@DateTime.Today.ToString("yyyy-MM-dd")" max="@DateTime.Today.AddMonths(1).ToString("yyyy-MM-dd")" onkeydown="return false;" />
    </div>

    <div class="form-group">
        <label for="date">Дата прибытия:</label>
        <input class="form-control" type="date" id="date" @bind="DestinatonDate" min="@DateTime.Today.ToString("yyyy-MM-dd")" max="@DateTime.Today.AddMonths(3).ToString("yyyy-MM-dd")" onkeydown="return false;" />
    </div>
    @if (DestinatonDate < DepartureDate)
    {
        <p style="color:red;">Дата прибытия не может быть раньше даты отправления.</p>
    }
    <div style="display: flex; justify-content: center;">
        <button class="editbut2" @onclick="AcceptBooking">Выбрать тур</button>
    </div>
</div>

@code {
    [Inject]
    private NavigationManager NavigationManager { get; set; } = null!;

    private List<Cities> Cities = new List<Cities>();

    private int selectedCityId;
    private int selectedCityId2;
    private DateTime DepartureDate = DateTime.Today; 
    private DateTime DestinatonDate = DateTime.Today;


    [Parameter]
    public string ApplicationTicketId { get; set; } = null!;

    private string Message { get; set; } = "";

    private async Task AcceptBooking()
    {
        if (DestinatonDate < DepartureDate)
        {
            Message = "Дата прибытия не может быть раньше даты отправления.";
            return;
        }
        var selectedRoute = new Routes
            {
                DeparturePointId = selectedCityId,
                DestinationPointId = selectedCityId2,
                DepartureTime = DepartureDate,
                DestinationTime = DestinatonDate,
                UserId = userService.CurrentUser?.Id ?? 0
            };


        dbContext.Routes.Add(selectedRoute);
        await dbContext.SaveChangesAsync();

        StateHasChanged();
//сюда почту
        NavigationManager.NavigateTo("/Profile");
    }

    protected override void OnInitialized()
    {
        LoadCities();
    }

    private void LoadCities()
    {
        Cities = dbContext.Cities.ToList();
        if (Cities.Any())
        {
            selectedCityId = Cities.First().Id;
            selectedCityId2 = Cities.Last().Id; 
            StateHasChanged();
        }
    }

    private void ChangeCity(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int cityId))
        {
            selectedCityId = cityId;
        }
    }

    private void ChangeCity2(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int cityId))
        {
            selectedCityId2 = cityId;
        }
    }
}

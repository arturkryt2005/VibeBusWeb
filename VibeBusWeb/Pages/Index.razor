@page "/"

<PageTitle>Главная страница</PageTitle>

<div class="login-form">
    <h1 class="Vhonh">Вход</h1>

    <div class="form-group">
        <label for="Name">Логин или почта</label>
        <input type="text" maxlength="30" id="_email" class="form-control" @bind="_email" />
    </div>

    <div class="form-group">
        <label for="password">Пароль</label>
        <input type="password" maxlength="8" id="_password" class="form-control" @bind="_password" />
    </div>

    <div class="buttons">
        <button type="submit" class="btn btn-primary" @onclick="Login">Войти</button>
        <button @onclick="RedirectToRegistrationPage" class=" btn btn-link">Нет аккаунта?</button>
    </div>
</div>

<Footer />
@code {
    private void RedirectToRegistrationPage()
    {
        NavigationManager.NavigateTo("/RegistrationPage");
    }

    [Inject]
    private NavigationManager NavigationManager { get; set; } = null!;

    private string _email = null!;
    private string _password = null!;

    private async Task Login()
    {
        if (string.IsNullOrEmpty(_email) || string.IsNullOrEmpty(_password))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Пожалуйста, заполните все обязательные поля.");
            return;
        }

        // var user = await dbContext.Users.FirstOrDefaultAsync(u => u.Email == _email && u.Password == _password);
        // if (user != null)
        // {

        //     testUserService.CurrentUser = user;
        //     NavigationManager.NavigateTo("/Profile");
        // }
        // else
        // {
        //     await JSRuntime.InvokeVoidAsync("alert", "Неверный адрес электронной почты или пароль.");
        // }
    }
}